# https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes#configuring-automatically-generated-release-notes

name: Release Drafter

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  CreateRelease:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TZ: "Asia/Tokyo"

    steps:
      - uses: actions/checkout@v3
      - name: Get previous tag
        id: pre_tag
        run: |
          echo "pre_tag=$(curl -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)" >> $GITHUB_OUTPUT
      - name: Generate tag
        id: release_tag
        run: |
          today=$(date +'%Y.%m.%d')
          pre_release_date=$(echo ${{ steps.pre_tag.outputs.pre_tag }} | awk -F'-' '{print $1}')
          pre_release_count=$(echo ${{ steps.pre_tag.outputs.pre_tag }} | awk -F'-' '{print $2}')
          if [[ ! $pre_release_date = $today ]]; then
            pre_release_count=0
          fi
          echo "release_tag=$today-$(($pre_release_count + 1))" >> $GITHUB_OUTPUT
      - name: Get pr description
        id: pr_description
        run: |
          echo "pr_description=$(curl -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number}}' \
            | jq .body | awk '{if ($0 == "null") print ""; else print}')" >> $GITHUB_OUTPUT
      - name: Generate release note changes
        id: changes
        run: |
          echo "changes=$(
          curl -X POST \
            -H 'Accept: application/vnd.github.v3+json' \
            -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -d '{
              "tag_name": "${{ steps.release_tag.outputs.release_tag }}",
              "previous_tag_name": "${{ steps.pre_tag.outputs.pre_tag }}",
              "target_commitish": "main"
            }' | jq .body
          )" >> $GITHUB_OUTPUT
      - name: Create release note body
        id: release_note_body
        run: |
          echo "release_note_body=$(echo \
            ${{ steps.pr_description.outputs.pr_description }} \
            ${{ steps.changes.outputs.changes }} \
            | sed 's/\\"//g' | sed 's/["â€œ]//g')" >> $GITHUB_OUTPUT
      - name: Create Release
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{ \
              \"tag_name\": \"${{ steps.release_tag.outputs.release_tag }}\", \
              \"target_commitish\": \"main\", \
              \"name\": \"${{ steps.release_tag.outputs.release_tag }}\", \
              \"body\": \"${{ steps.release_note_body.outputs.release_note_body }}\" \
            }" \
            -w "%{http_code}" \
            -o response_body.txt \
            https://api.github.com/repos/${{ github.repository }}/releases)
            status_code=$(tail -n1 <<< "$response")
            echo "Status Code: $status_code"
            body=$(cat response_body.txt)
            echo "Response Body: $body"
            if [ $status_code -ne 201 ]; then
              echo "Failed to create release"
              exit 1
            fi
